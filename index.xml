<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Lillian Xiong</title>
        <link>https://parallelli.github.io/</link>
        <description>Recent content on Lillian Xiong</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Sat, 10 Oct 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://parallelli.github.io/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>最近的时间管理体会</title>
        <link>https://parallelli.github.io/p/%E6%9C%80%E8%BF%91%E7%9A%84%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86%E4%BD%93%E4%BC%9A/</link>
        <pubDate>Sat, 10 Oct 2020 00:00:00 +0000</pubDate>
        
        <guid>https://parallelli.github.io/p/%E6%9C%80%E8%BF%91%E7%9A%84%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86%E4%BD%93%E4%BC%9A/</guid>
        <description>&lt;img src="https://parallelli.github.io/p/%E6%9C%80%E8%BF%91%E7%9A%84%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86%E4%BD%93%E4%BC%9A/ny_time.jpg" alt="Featured image of post 最近的时间管理体会" /&gt;&lt;p&gt;说到时间管理，很多人想要解决的问题是提高每天工作生活的效率。时下流行的工具有很多Todo list, GTD (Get Things Done) 等。他们都很聚焦在一个点：把脑袋里的东西丢到一个任务管理工具里，减少大脑用于记忆和管理这个任务的负担，这样大脑可以专注于做好当下的任务，以此提高效率。&lt;/p&gt;
&lt;p&gt;对我而言，时间管理的目标是帮我理清我每天都干了些什么事情，分别花了多久时间，以此来规避时间管理的盲目性。在工作了一天准备下班之后，发现自己一些重要的任务没有理想的进展，就会有压力，进而心里就有加班来赶工的心态。但我意识到这个状态是不可持续的，因为工作永远不可能通过加班来做完，同时如果长期持续这个状态，会极大影响身体和心理健康。比方说会因为工作没做完的压力而压缩掉锻炼身体和收拾家务的时间，日复一日，看到自己变形的体态和凌乱的房间，以及那还没有做完的工作，整个人陷入恶性循环&amp;hellip;&lt;/p&gt;
&lt;p&gt;这一周，我尝试了在Outlook的日程表上记录我每天工作的时间分配。这么做的目的是为了让我自己清楚我每天投入在工作中的8~9小时到底都在做什么，分别花了多少时间，以此自我肯定自己的工作，和帮助自己分析时间花费的瓶颈以制定后续针对性提高的计划，同时这些对自己生产力的洞察也可用到今后的工作安排计划中，跟利益相关者合理设置期望，避免overcommit, under-deliver.&lt;/p&gt;
&lt;p&gt;一个普通的工作日大体由两部分组成：开会、自由时间。我的目标：通过在日程表记录，让我对每天工作的细节和产出一目了然。&lt;/p&gt;
&lt;p&gt;对于自由时间部分，如果我提前有安排一个特定时间段做某项工作，我会提前把那个时段block上，如果没有，我就临场发挥。每半小时至一小时记录一次在那个时段做的事情，目标和实际结果。如果我发现有些我提前安排好的事情没有时间做了，我会把它往后挪或者明天。宗旨是如果那是我想要优先做的任务，我得给它找时间。&lt;/p&gt;
&lt;p&gt;效果很显著。&lt;/p&gt;
&lt;p&gt;纵然只是一次粗略的尝试，我已经体会到了记录的魔力。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;我非常清楚我这一天从10点到7点到底都做了什么。&lt;/strong&gt; 到下班时间，我不再会因为一些任务没有理想的进展而自我怀疑这天怎么什么也没干。这很对于保护心理健康很重要。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对一些任务的时间所需时间有了更准确的了解。&lt;/strong&gt; 有些原本以为一个小时做完的东西，却最终花了三小时，在提高业务能力和效率的同时，下次可以更好地预计完成时间。小到一个独立任务的用时预估，大到对整个团队的季度年度计划。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;更容易看到短板（成长的机会）。&lt;/strong&gt; 比如我发现我在IM上跟隔壁组同事就一个问题花了一个小时讨论无果，我或许应该开会来面对面讨论以提高沟通效率。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;要保持每天每个0.5~1小时一次的高频记录并不容易。最关键的是要找到一个适合自己的好用的工具。我以前尝试过印象笔记，Quip, Notion, Apple Notes以及一些不知名的App，都没有成功坚持记录，所以收效甚微。终于，踏破铁鞋无觅处，我发现Outlook确是特别好用！很简单去block一个时间和把一些需要往后挪的事项直接拖拽。毫不费劲地就把每一天都仔细记录了。&lt;/p&gt;
&lt;p&gt;最后，记录了并且定期（比如每周末）回顾，总结反思，才能更好地发挥记录的作用。一些简单有用的反思：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;检查每周用于开会的时间，是否太多或太少以至于影响了整体进度&lt;/li&gt;
&lt;li&gt;哪些任务实际完成所需时间跟预估的出入大于100%&lt;/li&gt;
&lt;li&gt;有多少事情是在一周工作过程中新出现的预先没有安排的，以及它们总共占用的时间&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;持续观察这些数据，它们会帮我们更好地规划工作，以此降低工作压力，保持身心健康。同时也是一个找到自己成长机会的捷径。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>用Hugo和Github Pages搭建个人博客</title>
        <link>https://parallelli.github.io/p/%E7%94%A8hugo%E5%92%8Cgithub-pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</link>
        <pubDate>Sun, 04 Oct 2020 00:00:00 +0000</pubDate>
        
        <guid>https://parallelli.github.io/p/%E7%94%A8hugo%E5%92%8Cgithub-pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</guid>
        <description>&lt;img src="https://parallelli.github.io/p/%E7%94%A8hugo%E5%92%8Cgithub-pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/grandcanyon.jpg" alt="Featured image of post 用Hugo和Github Pages搭建个人博客" /&gt;&lt;p&gt;现在随着各种各样的网站生成工具的普及和免费的服务器资源，搭建一个个人网站或博客变得很容易。本文将分享我通过Hugo和Github Pages来搭建这个网站的细节。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://gohugo.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Hugo&lt;/a&gt;是一个静态网站生成器。有很多现成的&lt;a class=&#34;link&#34; href=&#34;https://themes.gohugo.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;主题模板&lt;/a&gt;可以用，所以自己无需去设计和实现所有网页渲染的样式。我的这个博客是用的&lt;a class=&#34;link&#34; href=&#34;https://themes.gohugo.io/hugo-theme-stack/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Stack&lt;/a&gt;，我喜欢它的圆圆的卡片设计。&lt;/p&gt;
&lt;h3 id=&#34;1本地搭建网站&#34;&gt;1.本地搭建网站&lt;/h3&gt;
&lt;p&gt;仅仅用Hugo，就可以在本地轻松看到自己网站发布之后的效果。具体步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;下载Hugo。我是用Mac，所以直接用homebrew安装Hugo。&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;    brew install hugo
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;用Hugo创建一个网站。这条命令会帮你创建一个名为&amp;quot;testblog&amp;quot;的网站，同时你会在本地文件里看到一个名为“testblog”的文件夹。&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;    hugo new site testblog
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;选择一个主题给这个testblog网站。这里我以Stack主题为例。&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;    cd testblog

    git clone https://github.com/CaiJimmy/hugo-theme-stack.git --depth=1 themes/hugo-theme-stack

    # 拷贝样例网站的内容至当前目录
    cp -r themes/hugo-theme-stack/exampleSite/content ./    

    # 拷贝默认设置至当前目录
    cp -r themes/hugo-theme-stack/config.toml ./

    # 大功告成，运行如下命令便可在本地查看这个网页了
    hugo server
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;按照指示，在浏览器中输入http://localhost:1313/浏览。
&lt;figure&gt;
		&lt;a href=&#34;https://parallelli.github.io/p/%E7%94%A8hugo%E5%92%8Cgithub-pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/example.png&#34; data-size=&#34;2250x1348&#34;&gt;
			&lt;img srcset=&#34;https://parallelli.github.io/p/%E7%94%A8hugo%E5%92%8Cgithub-pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/example_huf58db6df55e3b4e2359d3a9d170f47b0_1126728_480x0_resize_box_2.png 480w, https://parallelli.github.io/p/%E7%94%A8hugo%E5%92%8Cgithub-pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/example_huf58db6df55e3b4e2359d3a9d170f47b0_1126728_1024x0_resize_box_2.png 1024w&#34;
				src=&#34;https://parallelli.github.io/p/%E7%94%A8hugo%E5%92%8Cgithub-pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/example.png&#34; width=&#34;2250&#34; height=&#34;1348&#34; loading=&#34;lazy&#34;
				alt=&#34;Stack主题的样例&#34;&gt;
		&lt;/a&gt;
		
		&lt;figcaption&gt;Stack主题的样例&lt;/figcaption&gt;
		
	&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;2部署上线&#34;&gt;2.部署上线&lt;/h3&gt;
&lt;p&gt;网站在本地测试好了之后，就可以通过Github Pages来部署上线了。
&lt;a class=&#34;link&#34; href=&#34;https://pages.github.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Github Pages&lt;/a&gt;是Github提供给每个用户的一个免费的网站托管服务和一个对应的用户域名&lt;code&gt;https://&amp;lt;username&amp;gt;.github.io&lt;/code&gt;。 Hugo官方网站提供了非常详细的步骤。具体如下&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;创建2个git repo，一个用来host网站代码，另一个用来host Hugo生成的静态网页。后者的repo名字需要跟&lt;code&gt;&amp;lt;github_username&amp;gt;.github.io&lt;/code&gt;一样。以后每次你发新的博客时，需要把更新push到第二个repo.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git clone &amp;lt;YOUR-PROJECT-URL&amp;gt; &amp;amp;&amp;amp; cd &amp;lt;YOUR-PROJECT&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;把在上一步搭建本地网站时的Hugo project拷贝到新的&amp;lt;YOUR-PROJECT&amp;gt; repo. 然后执行 &lt;code&gt;hugo server&lt;/code&gt;并查看网页是否在本地可以正常渲染。同样的，也是在 http://localhost:1313访问。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当你对网站样式满意之后，可以关掉本地服务器，并删除掉当前目录下的public文件夹。每次hugo server执行的时候，都会重新生成网站的内容去覆写这个文件夹。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;    rm -rf public
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;建一个submodule把&lt;code&gt;&amp;lt;username&amp;gt;.github.io&lt;/code&gt;托管的repo指向public目录。这样每次源文件改后，直接执行下一步中的deploy脚本，就可以自动更新网站repo.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;    git submodule add -b master https://github.com/&amp;lt;USERNAME&amp;gt;/&amp;lt;USERNAME&amp;gt;.github.io.git public.
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;
&lt;p&gt;把config.toml中的&lt;code&gt;baseURL&lt;/code&gt;改成&lt;code&gt;&amp;lt;USERNAME&amp;gt;.github.io&lt;/code&gt;。这么做的目的是网站所有子页面都会以此作为主目录。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;写一个deploy的&lt;a class=&#34;link&#34; href=&#34;https://github.com/Parallelli/hugoblog/blob/master/script/deploy&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;脚本&lt;/a&gt;。每次修改了源码后，直接运行如下命令来获取更新后的网站。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;    script/deploy
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样就搞定了。过几分钟就可以直接去&lt;code&gt;https://&amp;lt;username&amp;gt;.github.io&lt;/code&gt;访问你的个人网站了！
&lt;figure&gt;
		&lt;a href=&#34;https://parallelli.github.io/p/%E7%94%A8hugo%E5%92%8Cgithub-pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/parallelli.png&#34; data-size=&#34;2412x1306&#34;&gt;
			&lt;img srcset=&#34;https://parallelli.github.io/p/%E7%94%A8hugo%E5%92%8Cgithub-pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/parallelli_hu741808b4050c3cd2fad0faa6465a8341_1504916_480x0_resize_box_2.png 480w, https://parallelli.github.io/p/%E7%94%A8hugo%E5%92%8Cgithub-pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/parallelli_hu741808b4050c3cd2fad0faa6465a8341_1504916_1024x0_resize_box_2.png 1024w&#34;
				src=&#34;https://parallelli.github.io/p/%E7%94%A8hugo%E5%92%8Cgithub-pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/parallelli.png&#34; width=&#34;2412&#34; height=&#34;1306&#34; loading=&#34;lazy&#34;
				alt=&#34;初稿成品&#34;&gt;
		&lt;/a&gt;
		
		&lt;figcaption&gt;初稿成品&lt;/figcaption&gt;
		
	&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;3修改样式&#34;&gt;3.修改样式&lt;/h3&gt;
&lt;p&gt;拿到一个Hugo主题后，可以按照自己的喜好和需求来修改模板。在推出我的初稿之前，我对Stack theme做了如下修改：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;关掉右边栏的archive和tag cloud&lt;/li&gt;
&lt;li&gt;Enable Disqus所以每篇文章后面下面会有留言区&lt;/li&gt;
&lt;li&gt;去掉对文章段落小标题的高亮&lt;/li&gt;
&lt;li&gt;在About页关掉评论区&lt;/li&gt;
&lt;li&gt;去掉了头像右下角的emoji&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最终看起来就是你现在正看到的样子。&lt;a class=&#34;link&#34; href=&#34;https://blog.jimmycai.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;原作者的博客&lt;/a&gt;也是基于他的这个模板做的，功能更丰富一些，我觉得挺可爱的。&lt;/p&gt;
&lt;p&gt;接下来，我还会持续更新这个博客的样式，也会把值得分享的改动分享给大家。目前的计划包括引入Google Analytics对站点流量进行监控，增加订阅功能和本地搜索功能等。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;题图：美国大峡谷Grand Canyon，2019年2月拍的。
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        
    </channel>
</rss>
